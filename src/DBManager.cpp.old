#include "DBManager.h"
#include "DBHelper.h"
#include "Replicator.h"
#include "CronHelper.h"
#include <iostream>
#include <sstream>
#include <fstream> // ERREI AQUI
#include <cstdlib>

DBManager::DBManager() {}

void DBManager::inicializarBanco() {
    if (!DBHelper::createDataBase()) {
        std::cerr << "[repldb] Falha ao criar banco de dados.\n";
        return;
    }

    std::cout << "[repldb] Executando estrutura do banco...\n";
    if (DBHelper::executeSQL("db/init.sql")) {
        std::cout << "[repldb] Banco inicializado com sucesso!\n";
    } else {
        std::cerr << "[repldb] Erro ao executar init.sql\n";
    }
} // ERREI AQUI, INCLUINDO ESTRUTURA PARA CRIACAO DO BANCO INICIALMENTE


void DBManager::adicionarReplica(const std::string& fonte, const std::string& destino, const std::string& agendamento) {
    std::cout << "[repldb] Adicionando plano de replicação...\n";

    if (!DBHelper::insertReplicationPlan(fonte, destino, agendamento)) {
        std::cerr << "[repldb] Erro ao inserir plano de replicação.\n";
        return;
    }

    // Obter o último ID inserido
    std::string getIdCmd = "/opt/firebird/bin/isql -user SYSDBA -password repl@gis123 /opt/firebird/data/repldb.fdb -q -c \"SELECT MAX(id) FROM planos_replicacao;\" > /tmp/repldb_last_id.txt";
    std::system(getIdCmd.c_str());

    std::ifstream file("/tmp/repldb_last_id.txt");
    std::string id;
    std::getline(file, id);
    file.close();
    std::remove("/tmp/repldb_last_id.txt");

    if (!agendamento.empty()) {
        std::ostringstream comando;
        comando << "/opt/repldb/bin/repldb --run-replica --id " << id;
        if (!CronHelper::addCronJob(agendamento, comando.str(), id)) {
            std::cerr << "[repldb] Falha ao agendar tarefa via cron.\n";
        } else {
            std::cout << "[repldb] Agendamento criado com sucesso.\n";
        }
    }

    std::cout << "[repldb] Plano registrado com ID: " << id << "\n";
}

void DBManager::removerReplica(const std::string& id) {
    std::ostringstream sql;
    sql << "DELETE FROM planos_replicacao WHERE id = " << id << ";";

    if (!DBHelper::executeSQLCommand(sql.str())) {
        std::cerr << "[repldb] Erro ao remover plano de replicação.\n";
        return;
    }

    CronHelper::removeCronJob(id);
    std::cout << "[repldb] Plano removido e agendamento cancelado (se existia).\n";
}

void DBManager::listarReplicas() {
    std::cout << "[repldb] Listando planos de replicação...\n";
    DBHelper::listReplicationPlans();
}

void DBManager::listarLogs(const std::string& id) {
    std::cout << "[repldb] Listando logs...\n";
    DBHelper::listReplicationLogs(id);
}

void DBManager::executarReplica(const std::string& id) {
    std::ostringstream cmd;
    cmd << "SELECT origem, destino FROM planos_replicacao WHERE id = " << id << ";";

    std::string tmpFile = "/tmp/repldb_exec_" + id + ".sql";
    std::ofstream out(tmpFile);
    out << cmd.str();
    out.close();

    std::string extractCmd = "/opt/firebird/bin/isql -user SYSDBA -password repl@gis123 /opt/firebird/data/repldb.fdb -i " + tmpFile + " > /tmp/repldb_paths.txt";
    std::system(extractCmd.c_str());
    std::remove(tmpFile.c_str());

    std::ifstream result("/tmp/repldb_paths.txt");
    std::string origem, destino;
    std::getline(result, origem);
    std::getline(result, destino);
    result.close();
    std::remove("/tmp/repldb_paths.txt");

    if (Replicator::executarBackup(origem, "/tmp/repldb_backup.fbk")) {
        if (Replicator::executarRestore("/tmp/repldb_backup.fbk", destino)) {
            DBHelper::insertReplicationLog(id, "SUCESSO", "Replicação realizada com sucesso.");
        } else {
            DBHelper::insertReplicationLog(id, "ERRO", "Falha ao restaurar a réplica.");
        }
    } else {
        DBHelper::insertReplicationLog(id, "ERRO", "Falha ao gerar backup.");
    }
}

void DBManager::executarTodas() {
    std::string cmd = "/opt/firebird/bin/isql -user SYSDBA -password repl@gis123 /opt/firebird/data/repldb.fdb -q -e -c \"SELECT id FROM planos_replicacao;\" > /tmp/repldb_all_ids.txt";
    std::system(cmd.c_str());

    std::ifstream file("/tmp/repldb_all_ids.txt");
    std::string id;
    while (std::getline(file, id)) {
        if (!id.empty() && isdigit(id[0])) {
            executarReplica(id);
        }
    }
    file.close();
    std::remove("/tmp/repldb_all_ids.txt");
}

